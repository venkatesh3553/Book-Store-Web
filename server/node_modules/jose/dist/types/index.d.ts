export { compactDecrypt } from 'jose/jwe/compact/decrypt';
export type { CompactDecryptGetKey } from 'jose/jwe/compact/decrypt';
export { flattenedDecrypt } from 'jose/jwe/flattened/decrypt';
export type { FlattenedDecryptGetKey } from 'jose/jwe/flattened/decrypt';
export { generalDecrypt } from 'jose/jwe/general/decrypt';
export type { GeneralDecryptGetKey } from 'jose/jwe/general/decrypt';
export { GeneralEncrypt } from 'jose/jwe/general/encrypt';
export type { Recipient } from 'jose/jwe/general/encrypt';
export { compactVerify } from 'jose/jws/compact/verify';
export type { CompactVerifyGetKey } from 'jose/jws/compact/verify';
export { flattenedVerify } from 'jose/jws/flattened/verify';
export type { FlattenedVerifyGetKey } from 'jose/jws/flattened/verify';
export { generalVerify } from 'jose/jws/general/verify';
export type { GeneralVerifyGetKey } from 'jose/jws/general/verify';
export { jwtVerify } from 'jose/jwt/verify';
export type { JWTVerifyOptions, JWTVerifyGetKey } from 'jose/jwt/verify';
export { jwtDecrypt } from 'jose/jwt/decrypt';
export type { JWTDecryptOptions, JWTDecryptGetKey } from 'jose/jwt/decrypt';
export { CompactEncrypt } from 'jose/jwe/compact/encrypt';
export { FlattenedEncrypt } from 'jose/jwe/flattened/encrypt';
export { CompactSign } from 'jose/jws/compact/sign';
export { FlattenedSign } from 'jose/jws/flattened/sign';
export { GeneralSign } from 'jose/jws/general/sign';
export type { Signature } from 'jose/jws/general/sign';
export { SignJWT } from 'jose/jwt/sign';
export { EncryptJWT } from 'jose/jwt/encrypt';
export { calculateJwkThumbprint, calculateJwkThumbprintUri } from 'jose/jwk/thumbprint';
export { EmbeddedJWK } from 'jose/jwk/embedded';
export { createLocalJWKSet } from 'jose/jwks/local';
export { createRemoteJWKSet, jwksCache, customFetch } from 'jose/jwks/remote';
export type { RemoteJWKSetOptions, JWKSCacheInput, ExportedJWKSCache, FetchImplementation, } from 'jose/jwks/remote';
export { UnsecuredJWT } from 'jose/jwt/unsecured';
export type { UnsecuredResult } from 'jose/jwt/unsecured';
export { exportPKCS8, exportSPKI, exportJWK } from 'jose/key/export';
export { importSPKI, importPKCS8, importX509, importJWK } from 'jose/key/import';
export type { KeyImportOptions } from 'jose/key/import';
export { decodeProtectedHeader } from 'jose/decode/protected_header';
export { decodeJwt } from 'jose/jwt/decode';
export type { ProtectedHeaderParameters } from 'jose/decode/protected_header';
export * as errors from 'jose/errors';
export { generateKeyPair } from 'jose/key/generate/keypair';
export type { GenerateKeyPairResult, GenerateKeyPairOptions } from 'jose/key/generate/keypair';
export { generateSecret } from 'jose/key/generate/secret';
export type { GenerateSecretOptions } from 'jose/key/generate/secret';
export * as base64url from 'jose/base64url';
export type { CompactDecryptResult, CompactJWEHeaderParameters, CompactJWSHeaderParameters, CompactVerifyResult, CritOption, CryptoKey, DecryptOptions, EncryptOptions, FlattenedDecryptResult, FlattenedJWE, FlattenedJWS, FlattenedJWSInput, FlattenedVerifyResult, GeneralDecryptResult, GeneralJWE, GeneralJWS, GeneralJWSInput, GeneralVerifyResult, GetKeyFunction, JoseHeaderParameters, JSONWebKeySet, JWEHeaderParameters, JWEKeyManagementHeaderParameters, JWK_EC_Private, JWK_EC_Public, JWK_oct, JWK_OKP_Private, JWK_OKP_Public, JWK_RSA_Private, JWK_RSA_Public, JWK, JWKParameters, JWSHeaderParameters, JWTClaimVerificationOptions, JWTDecryptResult, JWTHeaderParameters, JWTPayload, JWTVerifyResult, KeyObject, ProduceJWT, ResolvedKey, SignOptions, VerifyOptions, } from './types';
/**
 * In prior releases this indicated whether a Node.js-specific build was loaded, this is now fixed
 * to `"WebCryptoAPI"`
 *
 * @deprecated
 */
export declare const cryptoRuntime = "WebCryptoAPI";
